[{"path":"/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http://contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright Â© 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"â€œThis Licenseâ€ refers version 3 GNU General Public License. â€œCopyrightâ€ also means copyright-like laws apply kinds works, semiconductor masks. â€œThe Programâ€ refers copyrightable work licensed License. licensee addressed â€œyouâ€. â€œLicenseesâ€ â€œrecipientsâ€ may individuals organizations. â€œmodifyâ€ work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called â€œmodified versionâ€ earlier work work â€œbased onâ€ earlier work. â€œcovered workâ€ means either unmodified Program work based Program. â€œpropagateâ€ work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. â€œconveyâ€ work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays â€œAppropriate Legal Noticesâ€ extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"â€œsource codeâ€ work means preferred form work making modifications . â€œObject codeâ€ means non-source form work. â€œStandard Interfaceâ€ means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. â€œSystem Librariesâ€ executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. â€œMajor Componentâ€, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . â€œCorresponding Sourceâ€ work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 â€œkeep intact noticesâ€. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called â€œaggregateâ€ compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. â€œUser Productâ€ either (1) â€œconsumer productâ€, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, â€œnormally usedâ€ refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. â€œInstallation Informationâ€ User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"â€œAdditional permissionsâ€ terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered â€œfurther restrictionsâ€ within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. â€œentity transactionâ€ transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"â€œcontributorâ€ copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s â€œcontributor versionâ€. contributor’s â€œessential patent claimsâ€ patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, â€œcontrolâ€ includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, â€œpatent licenseâ€ express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). â€œgrantâ€ patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. â€œKnowingly relyingâ€ means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license â€œdiscriminatoryâ€ include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License â€œor later versionâ€ applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM â€œAS ISâ€ WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least â€œcopyrightâ€ line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use â€œabout boxâ€. also get employer (work programmer) school, , sign â€œcopyright disclaimerâ€ program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2018 Michael Schramm  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. tbrf Copyright (C) 2018 Michael Schramm This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"/articles/intro_to_tbrf.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"tbrf Introduction","text":"Currently tbrf provides functions calculate binomial probability, geometric mean, mean, median, standard deviation, sum. also function apply R functions return numeric output. vignette demonstrates time-windows applied irregularly spaced data functions.","code":""},{"path":"/articles/intro_to_tbrf.html","id":"basic-usage","dir":"Articles","previous_headings":"","what":"Basic usage","title":"tbrf Introduction","text":"tbrf requires input dataframe two variables. First, column times date-times formatted class “POSIXt” “Date”. Second, column observed values calculate statistic . package includes suitable sample dataset: Core functions include five arguments. want 10-year rolling mean Dissolved_Oxygen dataset: can use tidy workflow:","code":"data(\"Dissolved_Oxygen\")  head(Dissolved_Oxygen) #> # A tibble: 6 × 6 #>   Station_ID Date       Param_Code Param_Desc               Average_DO Min_DO #>        <int> <date>     <chr>      <chr>                         <dbl>  <dbl> #> 1      12515 2000-01-03 00300      OXYGEN, DISSOLVED (MG/L)       6.19   6.19 #> 2      12515 2000-03-14 00300      OXYGEN, DISSOLVED (MG/L)       6.7    6.7  #> 3      12515 2000-03-16 00300      OXYGEN, DISSOLVED (MG/L)       6.41   6.41 #> 4      12515 2000-05-03 00300      OXYGEN, DISSOLVED (MG/L)       4.42   4.42 #> 5      12515 2000-06-15 00300      OXYGEN, DISSOLVED (MG/L)       4.86   4.86 #> 6      12515 2000-07-11 00300      OXYGEN, DISSOLVED (MG/L)       4.48   4.48 .tbl = dataframe used by the function x = column containing the values to calculate the statistic on tcolumn = formatted date-time or date column unit = character indicating the time unit used, one of \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\" n = numeric, indicating the window length tbr_mean(Dissolved_Oxygen, x = Average_DO,          tcolumn = Date, unit = \"years\", n = 10,          na.pad = FALSE) #> # A tibble: 236 × 9 #>    Station_ID Date       Param_Code Param_Desc    Average_DO Min_DO  mean lwr_ci #>         <int> <date>     <chr>      <chr>              <dbl>  <dbl> <dbl> <lgl>  #>  1      12515 2000-01-03 00300      OXYGEN, DISS…       6.19   6.19 NA    NA     #>  2      12515 2000-03-14 00300      OXYGEN, DISS…       6.7    6.7   6.73 NA     #>  3      12517 2000-03-14 00300      OXYGEN, DISS…       7.3    7.3   6.73 NA     #>  4      12515 2000-03-16 00300      OXYGEN, DISS…       6.41   6.41  6.65 NA     #>  5      12515 2000-05-03 00300      OXYGEN, DISS…       4.42   4.42  6.20 NA     #>  6      12517 2000-06-14 00300      OXYGEN, DISS…       5.74   5.74  6.13 NA     #>  7      12515 2000-06-15 00300      OXYGEN, DISS…       4.86   4.86  5.95 NA     #>  8      12515 2000-07-11 00300      OXYGEN, DISS…       4.48   4.48  5.76 NA     #>  9      12515 2000-09-12 00300      OXYGEN, DISS…       5.64   5.64  5.75 NA     #> 10      12517 2000-10-17 00300      OXYGEN, DISS…       7.96   7.96  5.97 NA     #> # ℹ 226 more rows #> # ℹ 1 more variable: upr_ci <lgl> Dissolved_Oxygen %>%   group_by(Station_ID) %>%   tbr_mean(Average_DO, Date, \"years\", 10, na.pad = FALSE) #> # A tibble: 236 × 9 #>    Station_ID Date       Param_Code Param_Desc    Average_DO Min_DO  mean lwr_ci #>         <int> <date>     <chr>      <chr>              <dbl>  <dbl> <dbl> <lgl>  #>  1      12515 2000-01-03 00300      OXYGEN, DISS…       6.19   6.19 NA    NA     #>  2      12515 2000-03-14 00300      OXYGEN, DISS…       6.7    6.7   6.44 NA     #>  3      12517 2000-03-14 00300      OXYGEN, DISS…       7.3    7.3  NA    NA     #>  4      12515 2000-03-16 00300      OXYGEN, DISS…       6.41   6.41  6.43 NA     #>  5      12515 2000-05-03 00300      OXYGEN, DISS…       4.42   4.42  5.93 NA     #>  6      12517 2000-06-14 00300      OXYGEN, DISS…       5.74   5.74  6.52 NA     #>  7      12515 2000-06-15 00300      OXYGEN, DISS…       4.86   4.86  5.72 NA     #>  8      12515 2000-07-11 00300      OXYGEN, DISS…       4.48   4.48  5.51 NA     #>  9      12515 2000-09-12 00300      OXYGEN, DISS…       5.64   5.64  5.53 NA     #> 10      12517 2000-10-17 00300      OXYGEN, DISS…       7.96   7.96  7    NA     #> # ℹ 226 more rows #> # ℹ 1 more variable: upr_ci <lgl>"},{"path":"/articles/intro_to_tbrf.html","id":"time-windows","dir":"Articles","previous_headings":"","what":"Time windows","title":"tbrf Introduction","text":"Generate sample data: can visualize data captured rolling time window using tbr_misc() base::length():","code":"# Some sample data df <- dplyr::tibble(date = sample(seq(as.Date('2000-01-01'),                                    as.Date('2005-12-30'), by = \"day\"), 25)) %>%   bind_rows(data.frame(date = sample(seq(as.Date('2009-01-01'),                                          as.Date('2011-12-30'), by = \"day\"), 25))) %>%   arrange(date) %>%   mutate(value = 1:50) df %>%   tbr_misc(x = value, tcolumn = date, unit = \"years\", n = 5, func = length) %>%   ggplot() +   geom_point(aes(date, value)) +   geom_errorbarh(aes(xmin = min_date, xmax = max_date,                       y = value, color = results)) +   scale_color_distiller(type = \"seq\", palette = \"OrRd\",                          direction = 1) +   guides(color = guide_colorbar(title = \"Number of samples\")) +   theme(legend.position = \"bottom\") +   labs(x = \"Sample Date\", y = \"Sample Value\",        title = \"Window length and n\",        caption = \"Lines depict width of samples included in the time window\\nColors indicate number of samples in the time window\")"},{"path":[]},{"path":"/articles/intro_to_tbrf.html","id":"binomial-probability","dir":"Articles","previous_headings":"Examples","what":"Binomial Probability","title":"tbrf Introduction","text":"Plot binomial probability dissolved oxygen fell 5 mg/L previous 7-year period:","code":"data(\"Dissolved_Oxygen\")  Dissolved_Oxygen %>%   mutate(x = case_when(     Average_DO >= 5 ~ 0,     Average_DO < 5 ~ 1)) %>%   tbr_binom(x, Date, \"years\", 7, alpha = 0.05) %>%   ggplot() +   geom_step(aes(x = Date, y = PointEst)) +   geom_ribbon(aes(x = Date, ymin = Lower, ymax = Upper), alpha = 0.5, stat = \"stepribbon\")"},{"path":"/articles/intro_to_tbrf.html","id":"geometric-mean","dir":"Articles","previous_headings":"Examples","what":"Geometric Mean","title":"tbrf Introduction","text":"Plot rolling 7-year geometric mean:","code":"data(\"Entero\")  ## note that there are censored values here that are only treated at ## the reported limit  Entero %>%   group_by(Station_ID) %>%   tbr_gmean(Value, Date, \"years\", 7, conf = 0.95, type = \"perc\")  %>%   ggplot() +   geom_point(aes(Date, Value, color = Station_ID), alpha = 0.5) +   geom_step(aes(Date, mean, color = Station_ID)) +   geom_ribbon(aes(x = Date, fill = Station_ID, ymin = lwr_ci, ymax = upr_ci), alpha = 0.5, stat = \"stepribbon\") +   scale_y_log10()"},{"path":"/articles/intro_to_tbrf.html","id":"mean","dir":"Articles","previous_headings":"Examples","what":"Mean","title":"tbrf Introduction","text":"Plot rolling 7-year mean:","code":"Dissolved_Oxygen %>%   mutate(Station_ID = as.factor(Station_ID)) %>%   group_by(Station_ID) %>%   tbr_mean(Average_DO, Date, \"years\", 7, conf = 0.95, type = \"perc\") %>%   ggplot() +   geom_point(aes(Date, Average_DO, color = Station_ID), alpha = 0.5) +   geom_step(aes(Date, mean, color = Station_ID)) +   geom_ribbon(aes(x = Date, ymin = lwr_ci, ymax = upr_ci, fill = Station_ID), alpha = 0.5, stat = \"stepribbon\")"},{"path":"/articles/intro_to_tbrf.html","id":"median","dir":"Articles","previous_headings":"Examples","what":"Median","title":"tbrf Introduction","text":"Plot rolling 7-year median:","code":"Dissolved_Oxygen %>%   mutate(Station_ID = as.factor(Station_ID)) %>%   group_by(Station_ID) %>%   tbr_median(Average_DO, Date, \"years\", 7, conf = 0.95, type = \"perc\") %>%   ggplot() +   geom_point(aes(Date, Average_DO, color = Station_ID), alpha = 0.5) +   geom_step(aes(Date, median, color = Station_ID)) +   geom_ribbon(aes(x = Date, ymin = lwr_ci, ymax = upr_ci, fill = Station_ID), alpha = 0.5, stat = \"stepribbon\")"},{"path":"/articles/intro_to_tbrf.html","id":"generic-functions","dir":"Articles","previous_headings":"Examples","what":"Generic functions","title":"tbrf Introduction","text":"tbr_misc() included apply functions accept single vector values. example, identify minimum values previous 7 year time periods:","code":"Dissolved_Oxygen %>%   tbr_misc(Average_DO, Date, \"years\", 7, func = min) %>%   ggplot() +   geom_point(aes(Date, Average_DO), alpha = 0.5) +   geom_line(aes(Date, results)) #> Warning: Removed 123 rows containing missing values or values outside the scale range #> (`geom_line()`)."},{"path":"/articles/intro_to_tbrf.html","id":"standard-deviation","dir":"Articles","previous_headings":"Examples","what":"Standard Deviation","title":"tbrf Introduction","text":"Plot rolling 7-year SD:","code":"Dissolved_Oxygen %>%   tbr_sd(Average_DO, Date, \"years\", 7) %>%   ggplot() +   geom_line(aes(Date, sd))"},{"path":"/articles/intro_to_tbrf.html","id":"sum","dir":"Articles","previous_headings":"Examples","what":"Sum","title":"tbrf Introduction","text":"Plot rolling 7-year sum:","code":"Dissolved_Oxygen %>%   mutate(Station_ID = as.factor(Station_ID)) %>%   group_by(Station_ID) %>%   tbr_sum(Average_DO, Date, \"years\", 7) %>%   ggplot() +   geom_line(aes(Date, sum, color = Station_ID))"},{"path":"/articles/intro_to_tbrf.html","id":"units","dir":"Articles","previous_headings":"","what":"Units","title":"tbrf Introduction","text":"Allowable character values unit include c(\"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\"). Example using \"minutes\" \"hours\":","code":"y = 3 * sin(2 * seq(from = 0, to = 4*pi, length.out = 100)) + rnorm(100) time = sample(seq(as.POSIXct(strptime(\"2017-01-01 00:01:00\", \"%Y-%m-%d %H:%M:%S\")),                   as.POSIXct(strptime(\"2017-01-01 23:00:00\", \"%Y-%m-%d %H:%M:%S\")),                   by = \"min\"), 100)  df <- data_frame(y, time)  df %>%   tbr_mean(y, time, \"minutes\", n = 30) %>%   ggplot() +   geom_point(aes(time, y)) +   geom_line(aes(time, mean)) df %>%   tbr_mean(y, time, \"minutes\", n = 60) %>%   ggplot() +   geom_point(aes(time, y)) +   geom_line(aes(time, mean)) df %>%   tbr_mean(y, time, \"hours\", n = 5) %>%   ggplot() +   geom_point(aes(time, y)) +   geom_line(aes(time, mean))"},{"path":"/articles/intro_to_tbrf.html","id":"ci-method","dir":"Articles","previous_headings":"","what":"CI method","title":"tbrf Introduction","text":"Confidence intervals tbr_gmean, tbr_mean, tbr_median calculated using boot_ci. need confidence intervals, calculation times substantially shorter. parallel, ncores, cl arguments passed boot can improve computation times. example using parallel processing Windows systems :","code":"library(snow)  cl <- makeCluster(4, type = \"SOCK\")  tbr_mean(Dissolved_Oxygen, Average_DO, Date,           \"years\", 5, R = 1000, conf = .95,          type = \"perc\", parallel = \"snow\",           cl = cl)  stopCluster(cl)"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Michael Schramm. Author, maintainer, copyright holder. Frank Harrell. Contributor. Bob Rudis. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Schramm M (2020). tbrf: Time Based Rolling Functions. doi:10.5281/zenodo.3727319, https://CRAN.R-project.org/package=tbrf.","code":"@Manual{,   title = {{tbrf}: Time Based Rolling Functions},   author = {Michael Schramm},   year = {2020},   url = {https://CRAN.R-project.org/package=tbrf},   doi = {10.5281/zenodo.3727319}, }"},{"path":"/index.html","id":"tbrf","dir":"","previous_headings":"","what":"Time-Based Rolling Functions","title":"Time-Based Rolling Functions","text":"tbrf retired. maintain package ensure remains CRAN expect additional functionality improvements. highly recommend runner functionality faster! goal tbrf provide time-window based rolling statistical functions. package differs rolling statistic packages intended use irregular measured data. Although tbrf can used apply statistical functions regularly sampled data, zoo, RcppRoll, packages provide fast, efficient, rich implementations rolling/windowed functions. appropriate example case water quality data measured irregular time intervals. Regulatory compliance often based statistical average measure exceedance probability applied samples collected previous 7-years. tbrf can used display regulatory status sample point. tbrf identifies previous n measurements within specified time window, applies function, outputs variable result rolling statistical measure.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Time-Based Rolling Functions","text":"tbrf available CRAN: development version available r-universe can installed :","code":"install.packages(\"tbrf\") install.packages('tbrf', repos = c('https://mps9506.r-universe.dev', 'https://cloud.r-project.org'))"},{"path":"/index.html","id":"available-functions","dir":"","previous_headings":"","what":"Available Functions","title":"Time-Based Rolling Functions","text":"tbr_binom: Rolling binomial probability confidence intervals. tbr_gmean: Rolling geometric mean confidence intervals. tbr_mean: Rolling mean confidence intervals. tbr_median: Rolling median confidence intervals. tbr_misc: Accepts user specified function. tbr_sd: Rolling standard deviation. tbr_sum: Rolling sum.","code":""},{"path":"/index.html","id":"usage","dir":"","previous_headings":"","what":"Usage","title":"Time-Based Rolling Functions","text":"See: https://mps9506.github.io/tbrf/","code":""},{"path":"/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Time-Based Rolling Functions","text":"Plot rolling 1-hour mean:  Plot rolling 3-hour mean:","code":"library(tbrf) library(dplyr) library(ggplot2)  y = 3 * sin(2 * seq(from = 0, to = 4*pi, length.out = 100)) + rnorm(100) time = sample(seq(as.POSIXct(strptime(\"2017-01-01 00:01:00\", \"%Y-%m-%d %H:%M:%S\")),                   as.POSIXct(strptime(\"2017-01-01 23:00:00\", \"%Y-%m-%d %H:%M:%S\")),                   by = \"min\"), 100)  df <- tibble(y, time)  df %>%   tbr_mean(y, time, \"hours\", n = 1) %>%   ggplot() +   geom_point(aes(time, y)) +   geom_step(aes(time, mean)) df %>%   tbr_mean(y, time, \"hours\", n = 3) %>%   ggplot() +   geom_point(aes(time, y)) +   geom_step(aes(time, mean))"},{"path":"/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Time-Based Rolling Functions","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"/index.html","id":"license","dir":"","previous_headings":"","what":"License","title":"Time-Based Rolling Functions","text":"tbrf code released GPL-3 | LICENSE.md binom_ci() implementation code licensed GPL (>=2) Frank Harrell’s Hmisc package. stat_stepribbon() implementation code licensed MIT Bob Rudis’s ggalt package. can cite use software, please use citation(\"tbrf\") .","code":""},{"path":"/index.html","id":"test-results","dir":"","previous_headings":"","what":"Test Results","title":"Time-Based Rolling Functions","text":"","code":"library(tbrf)  date() ## [1] \"Tue Aug 19 13:32:27 2025\"  devtools::test() ## ✔ | F W  S  OK | Context ##  ## ⠏ |          0 | expectedClass                                                   ## ⠏ |          0 | core functions work in piped workflow                           ## ⠙ |          2 | core functions work in piped workflow                           ## ✔ |          6 | core functions work in piped workflow ##  ## ⠏ |          0 | expectedMessages                                                ## ⠏ |          0 | core functions return expected errors and messages              ## ⠹ |          3 | core functions return expected errors and messages              ## ⠴ |          6 | core functions return expected errors and messages              ## ✔ |          7 | core functions return expected errors and messages ##  ## ⠏ |          0 | expectedValues                                                  ## ⠏ |          0 | core functions return expected structures and values            ## ⠹ |          3 | core functions return expected structures and values            ## ⠼ |          5 | core functions return expected structures and values            ## ⠴ |          6 | core functions return expected structures and values            ## ✔ |          6 | core functions return expected structures and values ##  ## ⠏ |          0 | internalStatsFunctions                                          ## ⠏ |          0 | internal statistical functions return expected values           ## ⠼ |          5 | internal statistical functions return expected values           ## ✔ |         17 | internal statistical functions return expected values ##  ## ══ Results ═════════════════════════════════════════════════════════════════════ ## Duration: 1.4 s ##  ## [ FAIL 0 | WARN 0 | SKIP 0 | PASS 36 ]"},{"path":"/reference/Dissolved_Oxygen.html","id":null,"dir":"Reference","previous_headings":"","what":"Dissolved oxygen measurements from the Tres Palacios River — Dissolved_Oxygen","title":"Dissolved oxygen measurements from the Tres Palacios River — Dissolved_Oxygen","text":"Data Texas Commission Environmental Quality Surface Water Quality Monitoring Information System. `AverageDO“ field mean dissolved oxygen concentrations (mg/L) measured field site day. MinDO minimum dissolved oxygen concentration measured site day.","code":""},{"path":"/reference/Dissolved_Oxygen.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dissolved oxygen measurements from the Tres Palacios River — Dissolved_Oxygen","text":"","code":"data(Dissolved_Oxygen)"},{"path":"/reference/Dissolved_Oxygen.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dissolved oxygen measurements from the Tres Palacios River — Dissolved_Oxygen","text":"data frame 236 rows 6 variables: Station_ID unique water quality monitoring station identifier Date sampling date yyyy-mm-dd format Param_Code unique parameter code Param_Desc parameter description units Average_DO mean dissolved oxygen measurement, mg/L Min_DO minimum dissolved oxygen measurement, mg/L","code":""},{"path":"/reference/Dissolved_Oxygen.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Dissolved oxygen measurements from the Tres Palacios River — Dissolved_Oxygen","text":"https://www80.tceq.texas.gov/SwqmisPublic/public/default.htm","code":""},{"path":"/reference/Entero.html","id":null,"dir":"Reference","previous_headings":"","what":"Enterococci bacteria measurements from the Tres Palacios River — Entero","title":"Enterococci bacteria measurements from the Tres Palacios River — Entero","text":"Data Texas Commission Environmental Quality Surface Water Quality Monitoring Information System. `Value“ field lab measured value Enterococci bacteria (MPN/100 mL) grab samples collected `Station ID` Tres Palacios River `Date`.","code":""},{"path":"/reference/Entero.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Enterococci bacteria measurements from the Tres Palacios River — Entero","text":"","code":"data(Entero)"},{"path":"/reference/Entero.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Enterococci bacteria measurements from the Tres Palacios River — Entero","text":"data frame 212 rows 5 variables: Station_ID unique water quality monitoring station identifier Date sampling date yyyy-mm-dd format Param_Code unique parameter code Param_Desc parameter description units Value Enterococci concentration, MPN/L","code":""},{"path":"/reference/Entero.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Enterococci bacteria measurements from the Tres Palacios River — Entero","text":"https://www80.tceq.texas.gov/SwqmisPublic/public/default.htm","code":""},{"path":"/reference/binom_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence Intervals for Binomial Probabilities — binom_ci","title":"Confidence Intervals for Binomial Probabilities — binom_ci","text":"implementation binconf function Frank Harrell's Hmisc package. Produces 1-alpha confidence intervals binomial probabilities.","code":""},{"path":"/reference/binom_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence Intervals for Binomial Probabilities — binom_ci","text":"","code":"binom_ci(   x,   n,   alpha = 0.05,   method = c(\"wilson\", \"exact\", \"asymptotic\"),   return.df = FALSE )"},{"path":"/reference/binom_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence Intervals for Binomial Probabilities — binom_ci","text":"x vector containing number \"successes\" binomial variates. n vector containing numbers corresponding observations. alpha probability type error, confidence coefficient = 1-alpha. method character string specifying method use. \"exact\" method uses F distribution compute exact (based binomial cdf) intervals; \"wilson\" interval score-test-based; \"asymptotic\" text-book, asymptotic normal interval. Following Agresti Coull, Wilson interval preferred default. return.df logical flag indicate data frame rather matrix returned.","code":""},{"path":"/reference/binom_ci.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Confidence Intervals for Binomial Probabilities — binom_ci","text":". Agresti B.. Coull, Approximate better \"exact\"   interval estimation binomial proportions, American Statistician,   52:119–126, 1998. R.G. Newcombe, Logit confidence intervals inverse sinh   transformation, American Statistician, 55:200–202, 2001. L.D. Brown, T.T. Cai . DasGupta, Interval estimation binomial   proportion (discussion), Statistical Science,   16:101–133, 2001.","code":""},{"path":"/reference/binom_ci.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Confidence Intervals for Binomial Probabilities — binom_ci","text":"Frank Harrell, modified Michael Schramm","code":""},{"path":"/reference/binom_ci.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Confidence Intervals for Binomial Probabilities — binom_ci","text":"","code":"binom_ci(46,50,method=\"wilson\") #>  PointEst     Lower     Upper #>      0.92 0.8116175 0.9684505"},{"path":"/reference/gm_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculates the Geometric Mean — gm_mean","title":"Calculates the Geometric Mean — gm_mean","text":"Originally Paul McMurdie, Ben Bolker, Gregor Stack Overflow: https://stackoverflow.com/questions/2602583/geometric-mean----built-","code":""},{"path":"/reference/gm_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculates the Geometric Mean — gm_mean","text":"","code":"gm_mean(x, na.rm = TRUE, zero.propagate = FALSE)"},{"path":"/reference/gm_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculates the Geometric Mean — gm_mean","text":"x vector numeric values na.rm logical TRUE/FALSE remove NA values zero.propagate logical TRUE/FALSE. Allows optional propagation zeros.","code":""},{"path":"/reference/gm_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculates the Geometric Mean — gm_mean","text":"geometric mean vector","code":""},{"path":"/reference/gm_mean_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the Geomean and CI — gm_mean_ci","title":"Returns the Geomean and CI — gm_mean_ci","text":"Generates Geometric mean confidence intervals using bootstrap.","code":""},{"path":"/reference/gm_mean_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the Geomean and CI — gm_mean_ci","text":"","code":"gm_mean_ci(   window,   conf = 0.95,   na.rm = TRUE,   type = \"basic\",   R = 1000,   parallel = \"no\",   ncpus = getOption(\"boot.ncpus\", 1L),   cl = NULL,   zero.propagate = FALSE )"},{"path":"/reference/gm_mean_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the Geomean and CI — gm_mean_ci","text":"window vector data values conf confidence level required interval. NA skipping calculating bootstrapped CI na.rm logical TRUE/FALSE. Remove NAs dataset. Defaults TRUE type character string, one c(\"norm\",\"basic\", \"stud\", \"perc\", \"bca\"). \"\" valid value. See boot.ci R number bootstrap replicates. see boot parallel type parallel operation used (). see boot ncpus integer: number process used parallel operation. see boot cl optional parallel snow cluster use parallel = \"snow\". see boot zero.propagate logical TRUE/FALSE Allows optional propagation zeros.","code":""},{"path":"/reference/gm_mean_ci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the Geomean and CI — gm_mean_ci","text":"named list geometric mean (optionally) specified confidence   interval","code":""},{"path":"/reference/list_NA.html","id":null,"dir":"Reference","previous_headings":"","what":"List NA — list_NA","title":"List NA — list_NA","text":"function return tibble NAs specified","code":""},{"path":"/reference/list_NA.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"List NA — list_NA","text":"","code":"list_NA(x)"},{"path":"/reference/list_NA.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"List NA — list_NA","text":"x named vector","code":""},{"path":"/reference/list_NA.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"List NA — list_NA","text":"empty tibble","code":""},{"path":"/reference/mean_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the mean and CI — mean_ci","title":"Returns the mean and CI — mean_ci","text":"Generates mean confidence intervals using bootstrap.","code":""},{"path":"/reference/mean_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the mean and CI — mean_ci","text":"","code":"mean_ci(   window,   conf = 0.95,   na.rm = TRUE,   type = \"basic\",   R = 1000,   parallel = \"no\",   ncpus = getOption(\"boot.ncpus\", 1L),   cl = NULL )"},{"path":"/reference/mean_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the mean and CI — mean_ci","text":"window vector data values conf confidence level required interval. NA skipping calculating bootstrapped CI na.rm logical TRUE/FALSE. Remove NAs dataset. Defaults TRUE type character string, one c(\"norm\",\"basic\", \"stud\", \"perc\", \"bca\"). \"\" valid value. See boot.ci R number bootstrap replicates. see boot parallel type parallel operation used (). see boot ncpus integer: number process used parallel operation. see boot cl optional parallel snow cluster use parallel = \"snow\". see boot","code":""},{"path":"/reference/mean_ci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the mean and CI — mean_ci","text":"named list mean (optionally) specified confidence   interval","code":""},{"path":"/reference/median_ci.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns the median and CI — median_ci","title":"Returns the median and CI — median_ci","text":"Generates median confidence intervals using bootstrap.","code":""},{"path":"/reference/median_ci.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns the median and CI — median_ci","text":"","code":"median_ci(   window,   conf = 0.95,   na.rm = TRUE,   type = \"basic\",   R = 1000,   parallel = \"no\",   ncpus = getOption(\"boot.ncpus\", 1L),   cl = NULL )"},{"path":"/reference/median_ci.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Returns the median and CI — median_ci","text":"window vector data values conf confidence level required interval. NA skipping calculating bootstrapped CI na.rm logical TRUE/FALSE. Remove NAs dataset. Defaults TRUE type character string, one c(\"norm\",\"basic\", \"stud\", \"perc\", \"bca\"). \"\" valid value. See boot.ci R number bootstrap replicates. see boot parallel type parallel operation used (). see boot ncpus integer: number process used parallel operation. see boot cl optional parallel snow cluster use parallel = \"snow\". see boot","code":""},{"path":"/reference/median_ci.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns the median and CI — median_ci","text":"named list mean (optionally) specified confidence   interval","code":""},{"path":"/reference/open_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Open Window — open_window","title":"Open Window — open_window","text":"calculates period row row interest","code":""},{"path":"/reference/open_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Open Window — open_window","text":"","code":"open_window(x, tcolumn, unit = \"years\", n, i, na.pad)"},{"path":"/reference/open_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Open Window — open_window","text":"x dataframe tcolumn time column unit unit n desired n row number na.pad logical `na.pad = TRUE` incomplete windows (duration window < `n`) return `NA`.","code":""},{"path":"/reference/open_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Open Window — open_window","text":"vector","code":""},{"path":"/reference/stat_stepribbon.html","id":null,"dir":"Reference","previous_headings":"","what":"Step ribbon statistic — stat_stepribbon","title":"Step ribbon statistic — stat_stepribbon","text":"Provides stairstep values ribbon plots. originally Bob Rudis's ggalt package longer CRAN.","code":""},{"path":"/reference/stat_stepribbon.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Step ribbon statistic — stat_stepribbon","text":"","code":"stat_stepribbon(   mapping = NULL,   data = NULL,   geom = \"ribbon\",   position = \"identity\",   na.rm = FALSE,   show.legend = NA,   inherit.aes = TRUE,   direction = \"hv\",   ... )"},{"path":"/reference/stat_stepribbon.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Step ribbon statistic — stat_stepribbon","text":"mapping Set aesthetic mappings created aes(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). geom geom use; defaults \"ribbon\" position position adjustment use data layer. can used various ways, including prevent overplotting improving display. position argument accepts following: result calling position function, position_jitter(). method allows passing extra arguments position. string naming position adjustment. give position string, strip function name position_ prefix. example, use position_jitter(), give position \"jitter\". information ways specify position, see layer position documentation. na.rm FALSE, default, missing values removed warning. TRUE, missing values silently removed. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders(). direction hv horizontal-veritcal steps, vh vertical-horizontal steps ... arguments passed layer()'s params argument. arguments broadly fall one 4 categories . Notably, arguments position argument, aesthetics required can passed .... Unknown arguments part 4 categories ignored. Static aesthetics mapped scale, fixed value apply layer whole. example, colour = \"red\" linewidth = 3. geom's documentation Aesthetics section lists available options. 'required' aesthetics passed params. Please note passing unmapped aesthetics vectors technically possible, order required length guaranteed parallel input data. constructing layer using stat_*() function, ... argument can used pass parameters geom part layer. example stat_density(geom = \"area\", outline.type = \"\"). geom's documentation lists parameters can accept. Inversely, constructing layer using geom_*() function, ... argument can used pass parameters stat part layer. example geom_area(stat = \"density\", adjust = 0.5). stat's documentation lists parameters can accept. key_glyph argument layer() may also passed .... can one functions described key glyphs, change display layer legend.","code":""},{"path":"/reference/stat_stepribbon.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Step ribbon statistic — stat_stepribbon","text":"https://groups.google.com/forum/?fromgroups=#!topic/ggplot2/9cFWHaH1CPs","code":""},{"path":"/reference/stat_stepribbon.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Step ribbon statistic — stat_stepribbon","text":"Bob Rudis","code":""},{"path":"/reference/stat_stepribbon.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Step ribbon statistic — stat_stepribbon","text":"","code":"x <- 1:10 df <- data.frame(x=x, y=x+10, ymin=x+7, ymax=x+12)  gg <- ggplot(df, aes(x, y)) gg <- gg + geom_ribbon(aes(ymin=ymin, ymax=ymax),                        stat=\"stepribbon\", fill=\"#b2b2b2\") gg <- gg + geom_step(color=\"#2b2b2b\") gg   gg <- ggplot(df, aes(x, y)) gg <- gg + geom_ribbon(aes(ymin=ymin, ymax=ymax),                        stat=\"stepribbon\", fill=\"#b2b2b2\",                        direction=\"hv\") gg <- gg + geom_step(color=\"#2b2b2b\") gg"},{"path":"/reference/tbr_binom.html","id":null,"dir":"Reference","previous_headings":"","what":"Time-Based Rolling Binomial Probability — tbr_binom","title":"Time-Based Rolling Binomial Probability — tbr_binom","text":"Produces rolling time-window based vector binomial probability confidence intervals.","code":""},{"path":"/reference/tbr_binom.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time-Based Rolling Binomial Probability — tbr_binom","text":"","code":"tbr_binom(.tbl, x, tcolumn, unit = \"years\", n, alpha = 0.05, na.pad = TRUE)"},{"path":"/reference/tbr_binom.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time-Based Rolling Binomial Probability — tbr_binom","text":".tbl dataframe two variables. x indicates variable column containing \"success\" \"failure\" observations coded 1 0. tcolumn indicates variable column containing Date Date-Time values. unit character, one \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\" n numeric, describing length time window selected units. alpha numeric, probability type 1 error, confidence coefficient = 1-alpha na.pad logical. `na.pad = TRUE` incomplete windows (duration window < `n`) return `NA`. Defatuls `TRUE`","code":""},{"path":"/reference/tbr_binom.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time-Based Rolling Binomial Probability — tbr_binom","text":"tibble binomial point estimate confidence intervals.","code":""},{"path":[]},{"path":"/reference/tbr_binom.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time-Based Rolling Binomial Probability — tbr_binom","text":"","code":"## Generate Sample Data df <- tibble::tibble( date = sample(seq(as.Date('2000-01-01'), as.Date('2015/12/30'), by = \"day\"), 100), value = rbinom(100, 1, 0.25) )  ## Run Function tbr_binom(df, x = value, tcolumn = date, unit = \"years\", n = 5, alpha = 0.1, na.pad = FALSE) #> # A tibble: 100 × 5 #>    date       value PointEst  Lower Upper #>    <date>     <int>    <dbl>  <dbl> <dbl> #>  1 2000-01-13     0    0     0      0.895 #>  2 2000-05-09     1    0.5   0.0527 0.947 #>  3 2000-07-15     1    0.667 0.254  0.965 #>  4 2001-05-16     1    0.75  0.356  0.974 #>  5 2001-08-11     1    0.8   0.435  0.979 #>  6 2001-10-04     0    0.667 0.347  0.883 #>  7 2002-01-15     0    0.571 0.289  0.814 #>  8 2002-01-21     1    0.625 0.348  0.839 #>  9 2002-01-22     0    0.556 0.303  0.782 #> 10 2002-02-11     1    0.6   0.352  0.806 #> # ℹ 90 more rows"},{"path":"/reference/tbr_binom_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Binomial test based on time window — tbr_binom_window","title":"Binomial test based on time window — tbr_binom_window","text":"Binomial test based time window","code":""},{"path":"/reference/tbr_binom_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Binomial test based on time window — tbr_binom_window","text":"","code":"tbr_binom_window(x, tcolumn, unit = \"years\", n, i, alpha, na.pad)"},{"path":"/reference/tbr_binom_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Binomial test based on time window — tbr_binom_window","text":"x column containing \"success\" \"failure\" observations 0 1 tcolumn formatted time column unit character, one \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\" n numeric, describing length time window. rows alpha numeric, probability type 1 error, confidence coefficient = 1-alpha na.pad logical. `na.pad = TRUE` incomplete windows (duration window < `n`) return `NA`.","code":""},{"path":"/reference/tbr_binom_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Binomial test based on time window — tbr_binom_window","text":"list","code":""},{"path":"/reference/tbr_gmean.html","id":null,"dir":"Reference","previous_headings":"","what":"Time-Based Rolling Geometric Mean — tbr_gmean","title":"Time-Based Rolling Geometric Mean — tbr_gmean","text":"Produces rolling time-window based vector geometric means confidence intervals.","code":""},{"path":"/reference/tbr_gmean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time-Based Rolling Geometric Mean — tbr_gmean","text":"","code":"tbr_gmean(.tbl, x, tcolumn, unit = \"years\", n, na.pad = TRUE, ...)"},{"path":"/reference/tbr_gmean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time-Based Rolling Geometric Mean — tbr_gmean","text":".tbl data frame least two variables; time column formatted date, date/time value column. x column containing values calculate geometric mean. tcolumn formatted time column. unit character, one \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\" n numeric, describing length time window. na.pad logical. `na.pad = TRUE` incomplete windows (duration window < `n`) return `NA`. Defatuls `TRUE` ... additional arguments passed gm_mean_ci","code":""},{"path":"/reference/tbr_gmean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time-Based Rolling Geometric Mean — tbr_gmean","text":"tibble columns rolling geometric mean upper   lower confidence levels.","code":""},{"path":[]},{"path":"/reference/tbr_gmean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time-Based Rolling Geometric Mean — tbr_gmean","text":"","code":"## Return a tibble with new rolling geometric mean column tbr_gmean(Dissolved_Oxygen, x = Average_DO, tcolumn = Date, unit = \"years\", n = 5, na.pad = FALSE) #> # A tibble: 236 × 7 #>    Station_ID Date       Param_Code Param_Desc           Average_DO Min_DO  mean #>         <int> <date>     <chr>      <chr>                     <dbl>  <dbl> <dbl> #>  1      12515 2000-01-03 00300      OXYGEN, DISSOLVED (…       6.19   6.19 NA    #>  2      12515 2000-03-14 00300      OXYGEN, DISSOLVED (…       6.7    6.7   6.71 #>  3      12517 2000-03-14 00300      OXYGEN, DISSOLVED (…       7.3    7.3   6.71 #>  4      12515 2000-03-16 00300      OXYGEN, DISSOLVED (…       6.41   6.41  6.64 #>  5      12515 2000-05-03 00300      OXYGEN, DISSOLVED (…       4.42   4.42  6.12 #>  6      12517 2000-06-14 00300      OXYGEN, DISSOLVED (…       5.74   5.74  6.05 #>  7      12515 2000-06-15 00300      OXYGEN, DISSOLVED (…       4.86   4.86  5.87 #>  8      12515 2000-07-11 00300      OXYGEN, DISSOLVED (…       4.48   4.48  5.67 #>  9      12515 2000-09-12 00300      OXYGEN, DISSOLVED (…       5.64   5.64  5.67 #> 10      12517 2000-10-17 00300      OXYGEN, DISSOLVED (…       7.96   7.96  5.86 #> # ℹ 226 more rows  if (FALSE) { # \\dontrun{ ## Return a tibble with rolling geometric mean and 95% CI tbr_gmean(Dissolved_Oxygen, x = Average_DO, tcolumn = Date, unit = \"years\", n = 5, conf = .95)} # }"},{"path":"/reference/tbr_gmean_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Geometric mean based on a time-window — tbr_gmean_window","title":"Geometric mean based on a time-window — tbr_gmean_window","text":"Geometric mean based time-window","code":""},{"path":"/reference/tbr_gmean_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Geometric mean based on a time-window — tbr_gmean_window","text":"","code":"tbr_gmean_window(x, tcolumn, unit = \"years\", n, i, na.pad, ...)"},{"path":"/reference/tbr_gmean_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Geometric mean based on a time-window — tbr_gmean_window","text":"x column containing values calculate geometric mean. tcolumn formatted time column. unit character, one \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\" n numeric, describing length time window. row ... additional arguments passed gmean_ci","code":""},{"path":"/reference/tbr_gmean_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Geometric mean based on a time-window — tbr_gmean_window","text":"list","code":""},{"path":"/reference/tbr_mean.html","id":null,"dir":"Reference","previous_headings":"","what":"Time-Based Rolling Mean — tbr_mean","title":"Time-Based Rolling Mean — tbr_mean","text":"Produces rolling time-window based vector means confidence intervals.","code":""},{"path":"/reference/tbr_mean.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time-Based Rolling Mean — tbr_mean","text":"","code":"tbr_mean(.tbl, x, tcolumn, unit = \"years\", n, na.pad = TRUE, ...)"},{"path":"/reference/tbr_mean.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time-Based Rolling Mean — tbr_mean","text":".tbl data frame least two variables; time column formatted date, date/time value column. x column containing numeric values calculate mean. tcolumn formatted time column. unit character, one \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\" n numeric, describing length time window. na.pad logical. `na.pad = TRUE` incomplete windows (duration window < `n`) return `NA`. Defaults `TRUE` ... additional arguments passed mean_ci.","code":""},{"path":"/reference/tbr_mean.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time-Based Rolling Mean — tbr_mean","text":"tibble columns rolling mean upper lower confidence intervals.","code":""},{"path":[]},{"path":"/reference/tbr_mean.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time-Based Rolling Mean — tbr_mean","text":"","code":"## Return a tibble with new rolling mean column tbr_mean(Dissolved_Oxygen, x = Average_DO, tcolumn = Date, unit = \"years\", n = 5, na.pad = FALSE) #> # A tibble: 236 × 9 #>    Station_ID Date       Param_Code Param_Desc    Average_DO Min_DO  mean lwr_ci #>         <int> <date>     <chr>      <chr>              <dbl>  <dbl> <dbl> <lgl>  #>  1      12515 2000-01-03 00300      OXYGEN, DISS…       6.19   6.19 NA    NA     #>  2      12515 2000-03-14 00300      OXYGEN, DISS…       6.7    6.7   6.73 NA     #>  3      12517 2000-03-14 00300      OXYGEN, DISS…       7.3    7.3   6.73 NA     #>  4      12515 2000-03-16 00300      OXYGEN, DISS…       6.41   6.41  6.65 NA     #>  5      12515 2000-05-03 00300      OXYGEN, DISS…       4.42   4.42  6.20 NA     #>  6      12517 2000-06-14 00300      OXYGEN, DISS…       5.74   5.74  6.13 NA     #>  7      12515 2000-06-15 00300      OXYGEN, DISS…       4.86   4.86  5.95 NA     #>  8      12515 2000-07-11 00300      OXYGEN, DISS…       4.48   4.48  5.76 NA     #>  9      12515 2000-09-12 00300      OXYGEN, DISS…       5.64   5.64  5.75 NA     #> 10      12517 2000-10-17 00300      OXYGEN, DISS…       7.96   7.96  5.97 NA     #> # ℹ 226 more rows #> # ℹ 1 more variable: upr_ci <lgl>  if (FALSE) { # \\dontrun{ ## Return a tibble with rolling mean and 95% CI tbr_mean(Dissolved_Oxygen, x = Average_DO, tcolumn = Date, unit = \"years\", n = 5, conf = .95)} # }"},{"path":"/reference/tbr_mean_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Mean Based on a Time-Window — tbr_mean_window","title":"Mean Based on a Time-Window — tbr_mean_window","text":"Mean Based Time-Window","code":""},{"path":"/reference/tbr_mean_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mean Based on a Time-Window — tbr_mean_window","text":"","code":"tbr_mean_window(x, tcolumn, unit = \"years\", n, i, na.pad, ...)"},{"path":"/reference/tbr_mean_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mean Based on a Time-Window — tbr_mean_window","text":"x column containing values calculate mean. tcolumn formatted time column. unit character, one \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\" n numeric, describing length time window. row na.pad logical. `na.pad = TRUE` incomplete windows (duration window < `n`) return `NA`. ... additional arguments passed mean_ci","code":""},{"path":"/reference/tbr_mean_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mean Based on a Time-Window — tbr_mean_window","text":"list","code":""},{"path":"/reference/tbr_median.html","id":null,"dir":"Reference","previous_headings":"","what":"Time-Based Rolling Median — tbr_median","title":"Time-Based Rolling Median — tbr_median","text":"Produces rolling time-window based vector medians confidence intervals.","code":""},{"path":"/reference/tbr_median.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time-Based Rolling Median — tbr_median","text":"","code":"tbr_median(.tbl, x, tcolumn, unit = \"years\", n, na.pad = TRUE, ...)"},{"path":"/reference/tbr_median.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time-Based Rolling Median — tbr_median","text":".tbl data frame least two variables; time column formatted date, date/time value column. x column containing numeric values calculate mean. tcolumn formatted time column. unit character, one \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\" n numeric, describing length time window. na.pad logical. `na.pad = TRUE` incomplete windows (duration window < `n`) return `NA`. Defaults `TRUE` ... additional arguments passed median_ci","code":""},{"path":"/reference/tbr_median.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time-Based Rolling Median — tbr_median","text":"tibble columns rolling median upper lower confidence intervals.","code":""},{"path":[]},{"path":"/reference/tbr_median.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time-Based Rolling Median — tbr_median","text":"","code":"## Return a tibble with new rolling median column tbr_median(Dissolved_Oxygen, x = Average_DO, tcolumn = Date, unit = \"years\", n = 5, na.pad = FALSE) #> # A tibble: 236 × 9 #>    Station_ID Date       Param_Code Param_Desc   Average_DO Min_DO median lwr_ci #>         <int> <date>     <chr>      <chr>             <dbl>  <dbl>  <dbl> <lgl>  #>  1      12515 2000-01-03 00300      OXYGEN, DIS…       6.19   6.19  NA    NA     #>  2      12515 2000-03-14 00300      OXYGEN, DIS…       6.7    6.7    6.7  NA     #>  3      12517 2000-03-14 00300      OXYGEN, DIS…       7.3    7.3    6.7  NA     #>  4      12515 2000-03-16 00300      OXYGEN, DIS…       6.41   6.41   6.56 NA     #>  5      12515 2000-05-03 00300      OXYGEN, DIS…       4.42   4.42   6.41 NA     #>  6      12517 2000-06-14 00300      OXYGEN, DIS…       5.74   5.74   6.3  NA     #>  7      12515 2000-06-15 00300      OXYGEN, DIS…       4.86   4.86   6.19 NA     #>  8      12515 2000-07-11 00300      OXYGEN, DIS…       4.48   4.48   5.96 NA     #>  9      12515 2000-09-12 00300      OXYGEN, DIS…       5.64   5.64   5.74 NA     #> 10      12517 2000-10-17 00300      OXYGEN, DIS…       7.96   7.96   5.96 NA     #> # ℹ 226 more rows #> # ℹ 1 more variable: upr_ci <lgl>  if (FALSE) { # \\dontrun{ ## Return a tibble with rolling median and 95% CI  tbr_median(Dissolved_Oxygen, x = Average_DO, tcolumn = Date, unit = \"years\", n = 5, conf = .95)} # }"},{"path":"/reference/tbr_median_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Median Based on a Time-Window — tbr_median_window","title":"Median Based on a Time-Window — tbr_median_window","text":"Median Based Time-Window","code":""},{"path":"/reference/tbr_median_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Median Based on a Time-Window — tbr_median_window","text":"","code":"tbr_median_window(x, tcolumn, unit = \"years\", n, i, na.pad, ...)"},{"path":"/reference/tbr_median_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Median Based on a Time-Window — tbr_median_window","text":"x column containing values calculate median. tcolumn formatted time column. unit character, one \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\" n numeric, describing length time window. row na.pad logical. `na.pad = TRUE` incomplete windows (duration window < `n`) return `NA`. ... additional arguments passed median_ci","code":""},{"path":"/reference/tbr_median_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Median Based on a Time-Window — tbr_median_window","text":"list","code":""},{"path":"/reference/tbr_misc.html","id":null,"dir":"Reference","previous_headings":"","what":"Use Generic Functions with Time Windows — tbr_misc","title":"Use Generic Functions with Time Windows — tbr_misc","text":"Use Generic Functions Time Windows","code":""},{"path":"/reference/tbr_misc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Use Generic Functions with Time Windows — tbr_misc","text":"","code":"tbr_misc(.tbl, x, tcolumn, unit = \"years\", n, na.pad = TRUE, func, ...)"},{"path":"/reference/tbr_misc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Use Generic Functions with Time Windows — tbr_misc","text":".tbl data frame least two variables; time column formatted date, date/time value column. x column containing values function applied . tcolumn formatted time column. unit character, one \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\" n numeric, describing length time window. na.pad logical. `na.pad = TRUE` incomplete windows (duration window < `n`) return `NA`. Defaults `TRUE` func specified function ... optional additional arguments passed function func","code":""},{"path":"/reference/tbr_misc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Use Generic Functions with Time Windows — tbr_misc","text":"tibble","code":""},{"path":"/reference/tbr_misc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Use Generic Functions with Time Windows — tbr_misc","text":"","code":"tbr_misc(Dissolved_Oxygen, x = Average_DO, tcolumn = Date, unit = \"years\",  n = 5, na.pad = FALSE, func = mean) #> # A tibble: 236 × 9 #>    Station_ID Date       Param_Code Param_Desc         Average_DO Min_DO results #>         <int> <date>     <chr>      <chr>                   <dbl>  <dbl>   <dbl> #>  1      12515 2000-01-03 00300      OXYGEN, DISSOLVED…       6.19   6.19    6.19 #>  2      12515 2000-03-14 00300      OXYGEN, DISSOLVED…       6.7    6.7     6.73 #>  3      12517 2000-03-14 00300      OXYGEN, DISSOLVED…       7.3    7.3     6.73 #>  4      12515 2000-03-16 00300      OXYGEN, DISSOLVED…       6.41   6.41    6.65 #>  5      12515 2000-05-03 00300      OXYGEN, DISSOLVED…       4.42   4.42    6.20 #>  6      12517 2000-06-14 00300      OXYGEN, DISSOLVED…       5.74   5.74    6.13 #>  7      12515 2000-06-15 00300      OXYGEN, DISSOLVED…       4.86   4.86    5.95 #>  8      12515 2000-07-11 00300      OXYGEN, DISSOLVED…       4.48   4.48    5.76 #>  9      12515 2000-09-12 00300      OXYGEN, DISSOLVED…       5.64   5.64    5.75 #> 10      12517 2000-10-17 00300      OXYGEN, DISSOLVED…       7.96   7.96    5.97 #> # ℹ 226 more rows #> # ℹ 2 more variables: min_date <date>, max_date <date>"},{"path":"/reference/tbr_sd.html","id":null,"dir":"Reference","previous_headings":"","what":"Time-Based Rolling Standard Deviation — tbr_sd","title":"Time-Based Rolling Standard Deviation — tbr_sd","text":"Time-Based Rolling Standard Deviation","code":""},{"path":"/reference/tbr_sd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time-Based Rolling Standard Deviation — tbr_sd","text":"","code":"tbr_sd(.tbl, x, tcolumn, unit = \"years\", n, na.rm = FALSE, na.pad = TRUE)"},{"path":"/reference/tbr_sd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time-Based Rolling Standard Deviation — tbr_sd","text":".tbl data frame least two variables; time column formatted date, date/time value column. x column containing values calculate standard deviation. tcolumn formatted time column. unit character, one \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\" n numeric, describing length time window. na.rm logical. missing values removed? na.pad logical. `na.pad = TRUE` incomplete windows (duration window < `n`) return `NA`. Defaults `TRUE`","code":""},{"path":"/reference/tbr_sd.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time-Based Rolling Standard Deviation — tbr_sd","text":"tibble column rolling sd.","code":""},{"path":[]},{"path":"/reference/tbr_sd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time-Based Rolling Standard Deviation — tbr_sd","text":"","code":"tbr_sd(Dissolved_Oxygen, x = Average_DO, tcolumn = Date, unit = \"years\", n = 5, na.pad = FALSE) #> # A tibble: 236 × 7 #>    Station_ID Date       Param_Code Param_Desc          Average_DO Min_DO     sd #>         <int> <date>     <chr>      <chr>                    <dbl>  <dbl>  <dbl> #>  1      12515 2000-01-03 00300      OXYGEN, DISSOLVED …       6.19   6.19 NA     #>  2      12515 2000-03-14 00300      OXYGEN, DISSOLVED …       6.7    6.7   0.556 #>  3      12517 2000-03-14 00300      OXYGEN, DISSOLVED …       7.3    7.3   0.556 #>  4      12515 2000-03-16 00300      OXYGEN, DISSOLVED …       6.41   6.41  0.481 #>  5      12515 2000-05-03 00300      OXYGEN, DISSOLVED …       4.42   4.42  1.08  #>  6      12517 2000-06-14 00300      OXYGEN, DISSOLVED …       5.74   5.74  0.985 #>  7      12515 2000-06-15 00300      OXYGEN, DISSOLVED …       4.86   4.86  1.02  #>  8      12515 2000-07-11 00300      OXYGEN, DISSOLVED …       4.48   4.48  1.08  #>  9      12515 2000-09-12 00300      OXYGEN, DISSOLVED …       5.64   5.64  1.01  #> 10      12517 2000-10-17 00300      OXYGEN, DISSOLVED …       7.96   7.96  1.18  #> # ℹ 226 more rows"},{"path":"/reference/tbr_sd_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Standard Deviation Based on a Time-Window — tbr_sd_window","title":"Standard Deviation Based on a Time-Window — tbr_sd_window","text":"Standard Deviation Based Time-Window","code":""},{"path":"/reference/tbr_sd_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Standard Deviation Based on a Time-Window — tbr_sd_window","text":"","code":"tbr_sd_window(x, tcolumn, unit = \"years\", n, i, na.pad, ...)"},{"path":"/reference/tbr_sd_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Standard Deviation Based on a Time-Window — tbr_sd_window","text":"x column containing values calculate standard deviation. tcolumn formatted time column. unit character, one \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\" n numeric, describing length time window. row na.pad logical. `na.pad = TRUE` incomplete windows (duration window < `n`) return `NA`. ... additional arguments passed base::sd()","code":""},{"path":"/reference/tbr_sd_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Standard Deviation Based on a Time-Window — tbr_sd_window","text":"numeric value","code":""},{"path":"/reference/tbr_sum.html","id":null,"dir":"Reference","previous_headings":"","what":"Time-Based Rolling Sum — tbr_sum","title":"Time-Based Rolling Sum — tbr_sum","text":"Time-Based Rolling Sum","code":""},{"path":"/reference/tbr_sum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time-Based Rolling Sum — tbr_sum","text":"","code":"tbr_sum(.tbl, x, tcolumn, unit = \"years\", n, na.rm = FALSE, na.pad = TRUE)"},{"path":"/reference/tbr_sum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time-Based Rolling Sum — tbr_sum","text":".tbl data frame least two variables; time column formatted date, date/time value column. x column containing values calculate sum. tcolumn formatted time column. unit character, one \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\" n numeric, describing length time window. na.rm logical. missing values removed? na.pad logical. `na.pad = TRUE` incomplete windows (duration window < `n`) return `NA`. Defatuls `TRUE`","code":""},{"path":"/reference/tbr_sum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Time-Based Rolling Sum — tbr_sum","text":"dataframe column rolling sum.","code":""},{"path":[]},{"path":"/reference/tbr_sum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Time-Based Rolling Sum — tbr_sum","text":"","code":"tbr_sum(Dissolved_Oxygen, x = Average_DO, tcolumn = Date, unit = \"years\", n = 5, na.pad = FALSE) #> # A tibble: 236 × 7 #>    Station_ID Date       Param_Code Param_Desc           Average_DO Min_DO   sum #>         <int> <date>     <chr>      <chr>                     <dbl>  <dbl> <dbl> #>  1      12515 2000-01-03 00300      OXYGEN, DISSOLVED (…       6.19   6.19  6.19 #>  2      12515 2000-03-14 00300      OXYGEN, DISSOLVED (…       6.7    6.7  20.2  #>  3      12517 2000-03-14 00300      OXYGEN, DISSOLVED (…       7.3    7.3  20.2  #>  4      12515 2000-03-16 00300      OXYGEN, DISSOLVED (…       6.41   6.41 26.6  #>  5      12515 2000-05-03 00300      OXYGEN, DISSOLVED (…       4.42   4.42 31.0  #>  6      12517 2000-06-14 00300      OXYGEN, DISSOLVED (…       5.74   5.74 36.8  #>  7      12515 2000-06-15 00300      OXYGEN, DISSOLVED (…       4.86   4.86 41.6  #>  8      12515 2000-07-11 00300      OXYGEN, DISSOLVED (…       4.48   4.48 46.1  #>  9      12515 2000-09-12 00300      OXYGEN, DISSOLVED (…       5.64   5.64 51.7  #> 10      12517 2000-10-17 00300      OXYGEN, DISSOLVED (…       7.96   7.96 59.7  #> # ℹ 226 more rows"},{"path":"/reference/tbr_sum_window.html","id":null,"dir":"Reference","previous_headings":"","what":"Sum Based on a Time-Window — tbr_sum_window","title":"Sum Based on a Time-Window — tbr_sum_window","text":"Sum Based Time-Window","code":""},{"path":"/reference/tbr_sum_window.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sum Based on a Time-Window — tbr_sum_window","text":"","code":"tbr_sum_window(x, tcolumn, unit = \"years\", n, i, na.rm, na.pad)"},{"path":"/reference/tbr_sum_window.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sum Based on a Time-Window — tbr_sum_window","text":"x column containing values calculate sum. tcolumn formatted time column. unit character, one \"years\", \"months\", \"weeks\", \"days\", \"hours\", \"minutes\", \"seconds\" n numeric, describing length time window. row na.rm logical. missing values removed? na.pad logical `na.pad = TRUE` incomplete windows (duration window < `n`) return `NA`.","code":""},{"path":"/reference/tbr_sum_window.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sum Based on a Time-Window — tbr_sum_window","text":"numeric value","code":""},{"path":"/reference/tbrf-ggproto.html","id":null,"dir":"Reference","previous_headings":"","what":"tbrf extensions to ggplot2 — tbrf-ggproto","title":"tbrf extensions to ggplot2 — tbrf-ggproto","text":"tbrf makes use ggproto class system extend functionality ggplot2. general actual classes little interest users standard ggplot2 api using geom_* stat_* functions building plot encouraged.","code":""},{"path":"/reference/tbrf-ggproto.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"tbrf extensions to ggplot2 — tbrf-ggproto","text":"https://groups.google.com/forum/?fromgroups=#!topic/ggplot2/9cFWHaH1CPs","code":""},{"path":"/reference/tbrf.html","id":null,"dir":"Reference","previous_headings":"","what":"Time-Based Rolling Functions — tbrf","title":"Time-Based Rolling Functions — tbrf","text":"Provides rolling statistical functions based date time windows instead n-lagged observations.","code":""},{"path":[]},{"path":"/reference/tbrf.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Time-Based Rolling Functions — tbrf","text":"Michael Schramm","code":""},{"path":"/news/index.html","id":"tbrf-017","dir":"Changelog","previous_headings":"","what":"tbrf 0.1.7","title":"tbrf 0.1.7","text":"CRAN release: 2025-08-19","code":""},{"path":"/news/index.html","id":"new-features-0-1-7","dir":"Changelog","previous_headings":"","what":"New features","title":"tbrf 0.1.7","text":"incorporate stat_stepribbon() ggalt package. adds dependency ggplot, super useful stat type data. adds Entero example dataset facilitate examples analysis using lognormal data. new na.pad argument tbr_ rolling functions pad results NA values window length less argument n.","code":""},{"path":"/news/index.html","id":"bug-fixes-0-1-7","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tbrf 0.1.7","text":"Remove vignette dependency, DESCRIPTION suggests ggalt package (#29).","code":""},{"path":"/news/index.html","id":"minor-changes-0-1-7","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"tbrf 0.1.7","text":"use usethis_import_from() document imports tbrf-package.R. updated vignettes examples new example data.","code":""},{"path":"/news/index.html","id":"tbrf-016","dir":"Changelog","previous_headings":"","what":"tbrf 0.1.6","title":"tbrf 0.1.6","text":"CRAN release: 2025-04-02","code":""},{"path":"/news/index.html","id":"minor-changes-0-1-6","dir":"Changelog","previous_headings":"","what":"Minor changes","title":"tbrf 0.1.6","text":"gm_mean_ci now properly passes na.rm zero.propagate arguments gm_mean (#18). update internal functions compatibility tidyselect. external links documentation proper package anchors (#25).","code":""},{"path":"/news/index.html","id":"tbrf-015","dir":"Changelog","previous_headings":"","what":"tbrf 0.1.5","title":"tbrf 0.1.5","text":"CRAN release: 2020-04-09","code":""},{"path":"/news/index.html","id":"bug-fixes-0-1-5","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tbrf 0.1.5","text":"tibble 3.0.0 introduced changes subassignments broke internal functions (#15). fixed pull request #.","code":""},{"path":"/news/index.html","id":"tbrf-014","dir":"Changelog","previous_headings":"","what":"tbrf 0.1.4","title":"tbrf 0.1.4","text":"CRAN release: 2020-03-25","code":""},{"path":"/news/index.html","id":"bug-fixes-0-1-4","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tbrf 0.1.4","text":"lubridate 1.7.4.9000 now assumes year month durations 365.25 days year (#12). tbrf now uses date intervals periods calculate date windows.","code":""},{"path":"/news/index.html","id":"tbrf-013","dir":"Changelog","previous_headings":"","what":"tbrf 0.1.3","title":"tbrf 0.1.3","text":"CRAN release: 2019-11-15","code":""},{"path":"/news/index.html","id":"bug-fixes-0-1-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tbrf 0.1.3","text":"tidyr 1.0.0 introduced warnings columns specified unnest() (#9). Fixed pull request #10.","code":""},{"path":"/news/index.html","id":"tbrf-012","dir":"Changelog","previous_headings":"","what":"tbrf 0.1.2","title":"tbrf 0.1.2","text":"CRAN release: 2019-02-02","code":""},{"path":"/news/index.html","id":"bug-fixes-0-1-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tbrf 0.1.2","text":"dplyr 0.8.0rc introduced breaking changes. Evaluation errors now properly fixed expected release version.","code":""},{"path":"/news/index.html","id":"tbrf-011","dir":"Changelog","previous_headings":"","what":"tbrf 0.1.1","title":"tbrf 0.1.1","text":"CRAN release: 2019-01-07","code":""},{"path":"/news/index.html","id":"minor-changes-0-1-1","dir":"Changelog","previous_headings":"","what":"Minor Changes","title":"tbrf 0.1.1","text":"dplyr 0.8.0 longer includes “Evaluation error” message, unit tests updated reflect change. (pull request #5)","code":""},{"path":"/news/index.html","id":"tbrf-010","dir":"Changelog","previous_headings":"","what":"tbrf 0.1.0","title":"tbrf 0.1.0","text":"CRAN release: 2018-09-03 Initial release.","code":""}]
